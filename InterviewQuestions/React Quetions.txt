1. How to display dynamic html data in react ?
2. How do you send data from parent component to child component in react ?
3. How to call parent component method from child component in react ?
4. How do you access the dom element in react ?
5. How to bind array/array of objects to dropdown in react ?
6. Create a lazy loaded component in react ?
7. How to display data entered by the user in another textbox ?
8. How to loop array/array of objects in react ?
9. How to conditionally render an element or text in react ?
10. How to change styles based on condition in react ?
11. How to dhow and hide data based on condition in react ?
12.Bind array/array of objects to radio button in react ?
13.Display radio button data selected by user in another textbox ?
14. How to call a method when component is rendered for the first time in react ?
15.Display keys and values of objects in a loop in react?
16. How to rerender a component on value change in react ?
17. How to call a method on every rerender of a component in react ?
18. How to add data into useState array in functional component in react ?
19. Create a search textbox filter in react ?
20.Create a counter component using useState ?
21.Create a counter component using useReducer in react ?
22.Change focus/enable/disable textbox in child component based on parent component 
button click in react? 
23. How to perform debouncing in react ?
24.Create a component to fetch data from api in react ?
25.Force a component to rerender with out using useState in react ?
26. How to call a method immediately after state is updated or 
after component is rerendered in react ?
27. How to display number of characters remaining functionality for textarea using react useRef?
28.Given two dropdowns, select 2nd dropdown options based on value selected in one dropdown ?
(Load states based on country selected)
29.Perform type checking using prop-types in react ?
30.Share data between components using context api ?
31.Give an emaple of optimization using useMemo in react ?
32.Give an example of optimization using usecallbacks in react ?
33.Create an error boundary component in react ?
34. How to display dropdown value selected by user in another textbox ?
35.Create a pure component in react ?
36.Create a controlled and uncontrolled component in react ?
37.Create a custom hook using react ?
38.Create a popup using portal in react ?
39.Which lifecycle hooks in class component are replaced with useEffect in functional components ? 
40.Create a pagination component in react ?




1. 𝗠𝗶𝗻𝗶𝗺𝗶𝘇𝗲 𝘂𝗻𝗻𝗲𝗰𝗲𝘀𝘀𝗮𝗿𝘆 𝗿𝗲-𝗿𝗲𝗻𝗱𝗲𝗿𝘀:
 - Use PureComponent or memoization techniques to prevent re-rendering components unnecessarily.
 - Utilize shouldComponentUpdate lifecycle method to manually control when a component should re-render.

2. 𝗨𝘀𝗲 𝗥𝗲𝗮𝗰𝘁.𝗺𝗲𝗺𝗼 𝗼𝗿 𝘂𝘀𝗲𝗠𝗲𝗺𝗼:
 - Wrap components with React.memo to memoize functional components and prevent re-renders if props haven't changed.
 - Use useMemo hook to memoize expensive computations within functional components.

3. 𝗔𝘃𝗼𝗶𝗱 𝘂𝗻𝗻𝗲𝗰𝗲𝘀𝘀𝗮𝗿𝘆 𝗰𝗼𝗺𝗽𝗼𝗻𝗲𝗻𝘁 𝗻𝗲𝘀𝘁𝗶𝗻𝗴:
 - Reduce the depth of component trees to minimize the number of render cycles.
 - Break down complex components into smaller, reusable components to improve maintainability and performance.

4. 𝗢𝗽𝘁𝗶𝗺𝗶𝘇𝗲 𝗿𝗲𝗻𝗱𝗲𝗿𝗶𝗻𝗴 𝘄𝗶𝘁𝗵 𝗸𝗲𝘆𝘀:
 - Ensure each list item in a mapped array has a unique and stable key prop to optimize rendering performance.
 - Keys help React identify which items have changed, been added, or removed, minimizing unnecessary DOM updates.

5. 𝗗𝗲𝗳𝗲𝗿 𝗲𝘅𝗽𝗲𝗻𝘀𝗶𝘃𝗲 𝗼𝗽𝗲𝗿𝗮𝘁𝗶𝗼𝗻𝘀:
 - Defer heavy computations, API requests, or DOM manipulations using techniques like lazy loading, virtualization, or pagination.
 - Use React's built-in Suspense and lazy loading to asynchronously load components and data.

6. 𝗨𝘀𝗲 𝗥𝗲𝗮𝗰𝘁 𝗣𝗿𝗼𝗳𝗶𝗹𝗲𝗿 𝗳𝗼𝗿 𝗽𝗲𝗿𝗳𝗼𝗿𝗺𝗮𝗻𝗰𝗲 𝗮𝗻𝗮𝗹𝘆𝘀𝗶𝘀:
 - Identify performance bottlenecks using React DevTools Profiler.
 - Analyze component render times, commit times, and reconciliation to pinpoint areas for optimization.

7. 𝗢𝗽𝘁𝗶𝗺𝗶𝘇𝗲 𝗯𝘂𝗻𝗱𝗹𝗲 𝘀𝗶𝘇𝗲:
 - Reduce the size of JavaScript bundles by code splitting and lazy loading components.
 - Utilize tree shaking and minification techniques to eliminate dead code and reduce bundle size.

8. 𝗠𝗲𝗺𝗼𝗶𝘇𝗲 𝗲𝘅𝗽𝗲𝗻𝘀𝗶𝘃𝗲 𝗳𝘂𝗻𝗰𝘁𝗶𝗼𝗻 𝗰𝗮𝗹𝗹𝘀:
 - Memoize expensive function calls using libraries like memoize-one or useMemo hook to cache results and avoid recomputation.

9. 𝗢𝗽𝘁𝗶𝗺𝗶𝘇𝗲 𝘀𝘁𝗮𝘁𝗲 𝗺𝗮𝗻𝗮𝗴𝗲𝗺𝗲𝗻𝘁:
 - Use lightweight state management solutions like useContext or useReducer hooks for simpler state requirements.
 - For complex state management needs, consider libraries like Redux, but ensure to optimize selectors and state updates.

10. 𝗣𝗿𝗼𝗳𝗶𝗹𝗲 𝗮𝗻𝗱 𝗼𝗽𝘁𝗶𝗺𝗶𝘇𝗲 𝗳𝗼𝗿 𝘀𝗽𝗲𝗰𝗶𝗳𝗶𝗰 𝗲𝗻𝘃𝗶𝗿𝗼𝗻𝗺𝗲𝗻𝘁𝘀:
 - Test your application performance in various browsers and devices to identify platform-specific performance issues.
 - Use performance profiling tools like Chrome DevTools to analyze and optimize rendering, scripting, and rendering performance.



Interview question: Which lifecycle hooks in class component are replaced with useEffect in functional components ?

1. componentDidMount(): equivalent to useEffect with empty array.
useEffect(()=>{
console.log("Called on initial mount only once")
},[])

2. componentDidUpdate(): equivalent to useEffect with array of dependencies
useEffect(()=>{
console.log("Called on every dependency update")
},[props.isFeature,props.content])
This will be called whenever dependency value changes (here Eg: isFeature or content).

3. componentWillUnmount(): equivalent to useEffect with return statement.
useEffect(()=>{
return ()=>{
console.log("Any cleanup activities/unsubscribing etc here")
}
})