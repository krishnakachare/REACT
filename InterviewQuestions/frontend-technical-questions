https://www.interviewbit.com/html-interview-questions

HTML
=====
1. DOCTYPE
2. <meta>
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
3. What is semantic HTML
4. SVG & Canvas
5. What is the role of the method attribute in HTML forms
6. HTML layout structure 
7. datalist
8. imagemap
9. Web Storage
10. Web Workers
11. manifest file in HTML
12. GeoLocation api
13. Web Components



CSS
===
1. display:none vs visibility:hidden
2. Absolute vs relative position
3. box-sizing:border-box/content-box
4. Pseudo calss & pseudo elements
5. box model
6. reset vs normalize CSS
   reset - remove browser-specific styling , normalize - make the default styles consistent across browsers
7. CSS preprocessor (variables, nesting, functions, and mixins , importing)
8. adaptive design and responsive design
9. flexbox
10. What does Accessibility (a11y) mean (Keyboard Accessibility,Text Alternatives,Semantic HTML,Accessible Forms)
11. grid vs flexbox
12. !important
13. translate()
14. CSS Sprites
15. How to fix browser-specific styling issues
   Browser-Specific CSS(--webkit) , Normalize or Reset CSS , Browser DevTools , Polyfills , Conditionalyl Comment a css
16. How to center align a div inside another div
17. calc()
18. What is CSS Specificity - 
   If there are two or more CSS rules that point to the same element, the selector with the highest specificity value will "win"
19. Image Sprite
20. CSS Media Queries
21. link to different stylesheets for different media and different widths of the browser window 
    <link rel="stylesheet" media="print" href="print.css">
    <link rel="stylesheet" media="screen" href="screen.css">
    <link rel="stylesheet" media="screen and (min-width: 480px)" href="example1.css">
    <link rel="stylesheet" media="screen and (min-width: 701px) and (max-width: 900px)" href="example2.css">
22. How do you organize your CSS code for maintainability and scalability?
    like BEM - Block Element Modifier, OOCSS, or SMACSS , css pre processors



Bootstrap
========
1. container vs container-fluid
2. scrollspy
 It's an auto-updating nav component that allows you to grab sections of the page based on where you're scrolling. Based on the scroll position, the .active class will update from one nav item to the next.
3. properties of flexbox
4. What are the important rules that you should follow while using Grids in Bootstrap?
    A row's immediate child must be a Column.
    Rows are just used to contain Columns and are not utilized for anything else.
    Rows should be put within a container.
5. why bootstrap?


Javascript
==========
1. undefined vs null
2. == vs ===
3. Hoisting
4. var,let,const
5. arrow function
6. closure
7. call,bind,apply
8. prototype
9. memoization
10. Symbol Datatype
11. Event Loop
12. use strict
13. function currying
14. Higher Order Function
15. Recursion
16. array flat()
17. Object.create()
18. shallow vs deep copy
19. Rest Parameter
20. spread operator
21. object vs Map
22. generator functions
23. Event Delegation


Typescript
===========
1. pros and cons of typescript
2. Symbol()
3. abstract classes
4. What is an interface?
5. ways to control member visibility in TypeScript
6. Enums
7. Optional Parameter
8. noImplicitAny is a compiler option that you set in the tsconfig.json file
9. union types
   let value: string | number = "Foo";
10. tuples
11. Javascript vs Typescript
12. Type vs Interface




Angular
=======
1. Property vs interpolation Binding
2. View Encapsulation - emulated,none,shadowdom
3. *ngif vs [hidden]
4. ngFor trackBy
5. <ng-template>
6. <ng-content> content projection
7. @HostBinding @HostListener
8. pipes , custom pipe
9. pure vs impure pipe
10. Lifecycle - ngOnchanges
11. ngDoCheck
12. Change Detection Strategies
13. @ViewChild
14. Dependency Inkection
15. interceptors
16. RxJS - Forkjoin
17. mergemap() vs switchmap() vs concatmap()
18. subject , behaviourSubject, replaySubject
19. Model Driven Form
20. Route Guard
21. Route Resolvers
22. lazy & pre loading
23. Update a project from 1 version to another angular version
24. NgRX - state management
25. CORS



React
=====
1. JSX
2. Virtual DOM
3. props, prop validation
4. props drilling
5. useEffect
6. custom Hook
7. controlled vs uncontrolled form
8. React.memo()
9. useMemo
10. useCallback
11. PureComponent
12. HigherOrderComponents
13. Synthetic Event
14. Portals
15. Error Boundary
16. Server Side Rendering
 ReactDOMServer.renderToString(<App />);
17. Interceptors
18. GraphQL
19. Profiler
20. Context API




